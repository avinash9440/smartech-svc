#!/bin/bash
#/*
# * File: jenkins-userdata.tmpl
# * Project: tmpl
# * Created Date: Thursday July 4th 2019
# * Author: Ashay Varun Chitnis
# * -----
# * Last Modified: Thursday July 4th 2019 6:16:01 pm
# * Modified By: Ashay Varun Chitnis at <ashay.chitnis@gmail.com>
# * -----
# * Copyright (c) 2019 Ashay Chitnis, all rights reserved.
# */




# Exit on errors; check /var/log/user-data.log if errors
set -x
set -e
# exec &> >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
curl -o /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key

rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key

# set selinux to disabled
setenforce 0
sed -i s/^SELINUX=.*$/SELINUX=permissive/ /etc/selinux/config

# yum install -y epel-release
# yum update -y

# Set timezone to Asia/Kolkata
rm -f /etc/localtime
ln -s /usr/share/zoneinfo/Asia/Kolkata /etc/localtime

# Jenkins config
# yum install -y wget \
#                java-1.8.0 \
#                git \
#                jenkins-2.184-1.1.noarch \
#                python2-pip \
#                cron \
#                docker \
#                nginx \
#                ansible


# pip uninstall -y urllib3
# yum remove -y python-urllib3
# ldconfig
# pip install --upgrade pip awscli boto3
# ldconfig

systemctl stop jenkins

usermod -aG dockerroot jenkins
cat > /etc/docker/daemon.json << DOCKER
{
    "live-restore": true,
    "group": "dockerroot"
}
DOCKER
systemctl start docker
systemctl enable docker

pip install --upgrade pip awscli boto3

sleep 60
export JENKINS_HOME=/var/lib/jenkins
mv $JENKINS_HOME $JENKINS_HOME-org
chown root:root $JENKINS_HOME-org -R
aws --region ${aws_region} s3 cp s3://${devops_bucket}/aws/svc/jenkins/archive/jenkins.tgz /tmp/jenkins.tgz
tar xf /tmp/jenkins.tgz -C /
mkdir -p $JENKINS_HOME/.ssh
aws configure list
aws --region ${aws_region} s3 cp s3://${devops_bucket}/aws/svc/jenkins/ssh/id_rsa $JENKINS_HOME/.ssh/
aws --region ${aws_region} s3 cp s3://${devops_bucket}/aws/svc/jenkins/ssh/id_rsa.pub $JENKINS_HOME/.ssh/
aws --region ${aws_region} s3 cp s3://${devops_bucket}/aws/svc/jenkins/script/jenkins-archive.sh /usr/local/bin/jenkins-archive.sh
chmod +x /usr/local/bin/jenkins-archive.sh
chown jenkins:jenkins /var/lib/jenkins -R
chmod 700 /var/lib/jenkins/.ssh
chmod 600 /var/lib/jenkins/.ssh/id_rsa
systemctl start jenkins
systemctl enable jenkins

# Nginx config
# amazon-linux-extras install nginx1.12 -y
mkdir -p /etc/ssl/private
chmod 700 /etc/ssl/private
mv -f /etc/nginx/nginx.conf /etc/nginx/nginx.conf.orig.`date +%F`

## Disabled self-signed certs due to gitbucket webhook limitations - Ashay, 29/08/19
# aws --region ap-south-1 s3 cp s3://${devops_bucket}/aws/svc/nginx/ssl/dhparam.pem /etc/ssl/certs/
# aws --region ap-south-1 s3 cp s3://${devops_bucket}/aws/svc/nginx/ssl/nginx-selfsigned.crt /etc/ssl/certs/
# aws --region ap-south-1 s3 cp s3://${devops_bucket}/aws/svc/nginx/ssl/nginx-selfsigned.key /etc/ssl/private/
# aws --region ap-south-1 s3 cp s3://${devops_bucket}/aws/svc/nginx/default.d/ssl-redirect.conf /etc/nginx/default.d/
# aws --region ap-south-1 s3 cp s3://${devops_bucket}/aws/svc/nginx/nginx.conf /etc/nginx/nginx.conf

aws --region ap-south-1 s3 cp s3://${devops_bucket}/aws/svc/nginx/nginx-80.conf /etc/nginx/nginx.conf
systemctl restart nginx
systemctl enable nginx

# Mongo client
# aws --region ${aws_region} s3 cp s3://${devops_bucket}/aws/svc/mongod/repo/mongodb-org-3.4.repo /etc/yum.repos.d/mongodb-org-3.4.repo
# yum update -y
# yum install -y mongodb-org-shell

# Cron config
echo "00 22 * * * DEVOPS_BUCKET=${devops_bucket} /usr/local/bin/jenkins-archive.sh" |crontab -
systemctl restart crond
crontab -l

# Retrieve Instance ID
INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)

# Attach Network Interface with EC2 instance
aws --region ${aws_region} ec2 attach-network-interface --network-interface-id "${network_interface_id}" --instance-id "$INSTANCE_ID" --device-index 1

sleep 15

# Find default nw interface 
# ip route get 8.8.8.8 | awk '{ print $5; exit }'
DEF_ETH=$(ip -o -4 route show to default | awk '{print $5}')
echo "GATEWAYDEV=$DEF_ETH" >> /etc/sysconfig/network

# Hoping that all possible unwanted interfaces are eliminated below
ADD_ETH=$(ls -1 /sys/class/net/| grep -v $DEF_ETH| grep -v lo|grep -v docker|grep -v '^[v|w|b]'|head -n 1)

# $ADD_ETH
cat > /etc/sysconfig/network-scripts/ifcfg-$ADD_ETH << IFACEETH1
DEVICE=$ADD_ETH
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=no
PERSISTENT_DHCLIENT=yes
DEFROUTE=no
EC2SYNC=yes

IFACEETH1

# route-$ADD_ETH
cat > /etc/sysconfig/network-scripts/route-$ADD_ETH << ROUTEETH1
default via ${gateway_ip} dev $ADD_ETH table 1000
${subnet_cidr} dev $ADD_ETH src ${private_ip} table 1000

ROUTEETH1

# rule-$ADD_ETH
cat > /etc/sysconfig/network-scripts/rule-$ADD_ETH << RULEETH1
from ${private_ip}/32 table 1000

RULEETH1

# Removing any stale PATH_DHCLIENT_PID files
rm  -vf /var/run/dhclient-$DEF_ETH.pid /var/run/dhclient-$ADD_ETH.pid

systemctl restart network
# Change unlimited credit option to limited/standard
aws --region ${aws_region} ec2 modify-instance-credit-specification --instance-credit-specification "InstanceId=$INSTANCE_ID,CpuCredits=standard"

# Temporary till DNS resolution corporate.netcore.co.in is fixed.
# Cannot resolve corporate.netcore.co.in from 192.168.2.234 and 2.7
echo -e "192.168.2.236\tcorporate.netcore.co.in" >> /etc/hosts

touch /tmp/finished-user-data
echo "Userdata execution complete"
